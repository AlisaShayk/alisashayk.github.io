function parallel_coordinate_plot(width_ratio = 0.40, height_ratio = 0.50) {

  var margin = {
    left: 0.1 * screen.width * width_ratio,
    right: 0.1 * screen.width * width_ratio,
    top: 0.1 * screen.height * height_ratio,
    bottom: 0.1 * screen.height * height_ratio
  };

  var width = screen.width * width_ratio - margin.left - margin.right;
  var height = screen.height * height_ratio - margin.top - margin.bottom;


  // var margin = {top: 50, right: 150, bottom: 20, left: 100},
  //   width = 750 - margin.left - margin.right,
  //   height = 400 - margin.top - margin.bottom;

  var dimensions = [
    /*{
      name: "country",
      scale: d3.scale.ordinal().rangePoints([0, height]),
      type: "string"

    },*/
    {
      name: "social conservatism",
      scale: d3.scale.linear().range([height, 0]),
      type: "number"
    },
    {
      name: "civil rights",
      scale: d3.scale.linear().range([height, 0]),
      type: "number"
    },
    {
      name: "education",
      scale: d3.scale.linear().range([height, 0]),
      type: "number"
    },
    {
      name: "religiosity",
      scale: d3.scale.linear().range([height, 0]),
      type: "number"
    },
    {
      name: "ATH",
      scale: d3.scale.linear().range([height, 0]),
      type: "number"
    },
    {
      name: "Discrimination_Rate",
      scale: d3.scale.linear().range([height, 0]),
      type: "number"
    }

  ];




  var x = d3.scale.ordinal().domain(dimensions.map(function(d) { return d.name; })).rangePoints([0, width]),
    y = {},
    dragging = {};

  var line = d3.svg.line(),
    axis = d3.svg.axis().orient("left"),
    background,
    foreground;

  var div = d3.select("body")
    .append("div")
    .classed("parallel-coordinated-plot",true)
    .style("width", `${width_ratio*100}%`)
    .style("height", `${height_ratio*100}%`);

  var svg = div.append("svg")
    .attr("id", "parallel-coordinated-plot")
    .attr("width", "100%")
    .attr("height", "100%")
    .attr("viewBox", `0 0 ${width + margin.left + margin.right} ${height + margin.top + margin.bottom}`)
    .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");


  //LOAD DATA for PARALLEL COORDINATES

  d3.csv("data/data.csv", function(error, data) {

    if (error) throw error;

    //Create the dimensions depending on attribute "type" (number|string)
    //The x-scale calculates the position by attribute dimensions[x].name
    /*dimensions.forEach(function(dimension) {
      dimension.scale.domain(dimension.type === "number"
        ? d3.extent(data, function(d) { return +d[dimension.name]; })
        : data.map(function(d) { return d[dimension.name]; }).sort());
    });*/
    /*console.log(dimensions[1]);*/
    dimensions[0].scale.domain([1,5]);
    dimensions[1].scale.domain([-4,21]);
    dimensions[2].scale.domain([0,8]);
    dimensions[3].scale.domain([0,10]);
    dimensions[4].scale.domain([-2,2]);
    dimensions[5].scale.domain([0,100]);


    // Add grey background lines for context.
    background = svg.append("g")
      .attr("class", "background")
      .selectAll("path")
      .data(data)
      .enter().append("path")
      .attr("d", path);

    // Add blue foreground lines for focus.
    foreground = svg.append("g")
      .attr("class", "foreground")
      .selectAll("path")
      .data(data)
      .enter().append("path")
      .attr("d", path);

    // Add a group element for each dimension.
    var g = svg.selectAll(".dimension")
      .data(dimensions)
      .enter().append("g")
      .attr("class", "dimension")
      .attr("transform", function(d) { return "translate(" + x(d.name) + ")"; })
      .call(d3.behavior.drag()
        .origin(function(d) { return {x: x(d.name)}; })
        .on("dragstart", function(d) {
          dragging[d.name] = x(d.name);
          background.attr("visibility", "hidden");
        })
        .on("drag", function(d) {
          dragging[d.name] = Math.min(width, Math.max(0, d3.event.x));
          foreground.attr("d", path);
          dimensions.sort(function(a, b) { return position(a) - position(b); });
          x.domain(dimensions.map(function(d) { return d.name; }));
          g.attr("transform", function(d) { return "translate(" + position(d) + ")"; })
        })
        .on("dragend", function(d) {
          delete dragging[d.name];
          transition(d3.select(this)).attr("transform", "translate(" + x(d.name) + ")");
          transition(foreground).attr("d", path);
          background
            .attr("d", path)
            .transition()
            .delay(500)
            .duration(0)
            .attr("visibility", null);
        })
      );

    // Add an axis and title.
    g.append("g")
      .attr("class", "axis")
      .each(function(d) { d3.select(this).call(axis.scale(d.scale)); })
      .append("text")
      .style("text-anchor", "middle")
      .attr("class", "axis-label")
      .attr("y", -19)
      .text(function(d) { return d.name; });

    // Add and store a brush for each axis.
    g.append("g")
      .attr("class", "brush")
      .each(function(d) {
        d3.select(this).call(d.scale.brush = d3.svg.brush().y(d.scale).on("brushstart", brushstart).on("brush", brush));
      })
      .selectAll("rect")
      .attr("x", -8)
      .attr("width", 16);
  });

  function position(d) {
    var v = dragging[d.name];
    return v == null ? x(d.name) : v;
  }

  function transition(g) {
    return g.transition().duration(500);
  }

  // Returns the path for a given data point.
  function path(d) {
    return line(dimensions.map(function(dimension) {
      var v = dragging[dimension.name];
      var tx = v == null ? x(dimension.name) : v;
      //console.log(d[dimension.name]);
      //console.log([tx, dimension.scale(d[dimension.name])]);
      return [tx, dimension.scale(d[dimension.name])];
    }));

  }

  function brushstart() {
    d3.event.sourceEvent.stopPropagation();
  }

  // Handles a brush event, toggling the display of foreground lines.
  function brush() {
    var actives = dimensions.filter(function(p) { return !p.scale.brush.empty(); })
    extents = actives.map(function(p) { return p.scale.brush.extent(); });
    console.log(extents);
    foreground.style("display", function(d) {
      return actives.every(function(p, i) {

        return extents[i][0] <= parseFloat(d[p.name]) && parseFloat(d[p.name]) <= extents[i][1];

      }) ? null : "none";
    });
  }
}